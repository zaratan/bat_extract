import { BatExtractor } from './batExtractor';
import { promises as fs } from 'fs';

async function analyzeCarte(): Promise<void> {
  const extractor = new BatExtractor('./temp_images');

  try {
    console.log('üó∫Ô∏è  Analyse approfondie de la carte de distribution');
    console.log('=================================================');

    await extractor.initialize('fra');

    const imagePath =
      './images/plan-actions-chiropteres.fr-barbastelle-deurope-carte-barbastelle-deurope-2048x1271.png';

    // Configuration optimis√©e pour cartes g√©ographiques
    console.log('üîç Extraction avec param√®tres optimis√©s pour cartes...');

    const mapResult = await extractor.extractFromImage(imagePath, {
      preprocess: true,
      imageOptions: {
        resize: { width: 2400 }, // Tr√®s haute r√©solution
        enhance: false,
        grayscale: false, // Garder les couleurs pour mieux distinguer les √©l√©ments
      },
      ocrOptions: {
        language: 'fra',
        tessJsOptions: {
          tessedit_pageseg_mode: '11', // Sparse text
          tessedit_char_whitelist:
            'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz√Ä√â√à√ä√ã√é√è√î√ô√õ√ú√á√†√°√¢√§√©√®√™√´√≠√¨√Æ√Ø√≥√≤√¥√∂√∫√π√ª√º√Ω√ø√ß0123456789 .-',
        },
      },
    });

    console.log('üìä R√©sultat extraction carte:');
    console.log('Confiance:', `${mapResult.confidence.toFixed(2)}%`);
    console.log('Texte extrait:', mapResult.text);
    console.log('\n' + '='.repeat(60) + '\n');

    // Liste √©largie de termes g√©ographiques
    const geoTerms = [
      // D√©partements
      'Ain',
      'Aisne',
      'Allier',
      'Alpes-de-Haute-Provence',
      'Hautes-Alpes',
      'Alpes-Maritimes',
      'Ard√®che',
      'Ardennes',
      'Ari√®ge',
      'Aube',
      'Aude',
      'Aveyron',
      'Bouches-du-Rh√¥ne',
      'Calvados',
      'Cantal',
      'Charente',
      'Charente-Maritime',
      'Cher',
      'Corr√®ze',
      'Corse-du-Sud',
      'Haute-Corse',
      "C√¥te-d'Or",
      "C√¥tes-d'Armor",
      'Creuse',
      'Dordogne',
      'Doubs',
      'Dr√¥me',
      'Eure',
      'Eure-et-Loir',
      'Finist√®re',
      'Gard',
      'Haute-Garonne',
      'Gers',
      'Gironde',
      'H√©rault',
      'Ille-et-Vilaine',
      'Indre',
      'Indre-et-Loire',
      'Is√®re',
      'Jura',
      'Landes',
      'Loir-et-Cher',
      'Loire',
      'Haute-Loire',
      'Loire-Atlantique',
      'Loiret',
      'Lot',
      'Lot-et-Garonne',
      'Loz√®re',
      'Maine-et-Loire',
      'Manche',
      'Marne',
      'Haute-Marne',
      'Mayenne',
      'Meurthe-et-Moselle',
      'Meuse',
      'Morbihan',
      'Moselle',
      'Ni√®vre',
      'Nord',
      'Oise',
      'Orne',
      'Pas-de-Calais',
      'Puy-de-D√¥me',
      'Pyr√©n√©es-Atlantiques',
      'Hautes-Pyr√©n√©es',
      'Pyr√©n√©es-Orientales',
      'Bas-Rhin',
      'Haut-Rhin',
      'Rh√¥ne',
      'Haute-Sa√¥ne',
      'Sa√¥ne-et-Loire',
      'Sarthe',
      'Savoie',
      'Haute-Savoie',
      'Paris',
      'Seine-Maritime',
      'Seine-et-Marne',
      'Yvelines',
      'Deux-S√®vres',
      'Somme',
      'Tarn',
      'Tarn-et-Garonne',
      'Var',
      'Vaucluse',
      'Vend√©e',
      'Vienne',
      'Haute-Vienne',
      'Vosges',
      'Yonne',
      'Territoire de Belfort',
      'Essonne',
      'Hauts-de-Seine',
      'Seine-Saint-Denis',
      'Val-de-Marne',
      "Val-d'Oise",

      // R√©gions
      'Auvergne-Rh√¥ne-Alpes',
      'Bourgogne-Franche-Comt√©',
      'Bretagne',
      'Centre-Val de Loire',
      'Corse',
      'Grand Est',
      'Hauts-de-France',
      '√éle-de-France',
      'Normandie',
      'Nouvelle-Aquitaine',
      'Occitanie',
      'Pays de la Loire',
      "Provence-Alpes-C√¥te d'Azur",

      // Pays voisins (mentionn√©s dans la source)
      'France',
      'Belgique',
      'Luxembourg',
      'Suisse',

      // Villes importantes
      'Lyon',
      'Marseille',
      'Toulouse',
      'Lille',
      'Bordeaux',
      'Nantes',
      'Strasbourg',
      'Montpellier',
      'Rennes',
      'Reims',
      'Tours',
      'Nancy',
      'Metz',
      'Dijon',

      // Termes g√©ographiques g√©n√©raux
      'Nord',
      'Sud',
      'Est',
      'Ouest',
      'Centre',
    ];

    const foundTerms = new Set<string>();
    const text = mapResult.text.toLowerCase();

    console.log('üîç Recherche de termes g√©ographiques...');

    geoTerms.forEach(term => {
      const searchTerm = term.toLowerCase();
      if (text.includes(searchTerm)) {
        foundTerms.add(term);
        console.log(`‚úÖ Terme g√©ographique trouv√©: ${term}`);
      }
    });

    // Recherche de patterns de codes postaux
    const postalCodePattern = /\b\d{5}\b/g;
    const postalCodes = mapResult.text.match(postalCodePattern) || [];

    console.log(`\nüìÆ Codes postaux d√©tect√©s: ${postalCodes.length}`);
    postalCodes.forEach(code => {
      console.log(`  ‚Ä¢ ${code}`);
    });

    // Analyse du contenu sp√©cifique √† cette carte
    console.log('\nüìã ANALYSE SP√âCIFIQUE DE LA CARTE:');
    console.log('=================================');

    const specificInfo = {
      title: "Distribution de la Barbastelle d'Europe",
      source: 'Arthur L., Lemaire M. - 2021',
      publisher: '√âditions Biotope, M√®ze',
      museum: "Mus√©um national d'Histoire naturelle, Paris",
      countries: ['France', 'Belgique', 'Luxembourg', 'Suisse'],
      mapType: "Distribution d'esp√®ce (Barbastelle d'Europe)",
      legend: {
        'tr√®s rare':
          'Esp√®ce actuellement tr√®s rarement inventori√©e ou exceptionnellement observ√©e (moins de 5 donn√©es)',
        rare: 'Esp√®ce actuellement rare ou assez rare',
        'peu commune': 'Esp√®ce peu commune ou localement commune',
        'assez commune': 'Esp√®ce assez commune √† tr√®s commune',
        'mal connue': 'Esp√®ce pr√©sente mais mal connue',
        disparue: 'Esp√®ce disparue ou non retrouv√©e sur la zone',
        absente: "Esp√®ce absente, n'ayant jamais √©t√© trouv√©e",
      },
    };

    console.log('üìä Type de carte:', specificInfo.mapType);
    console.log('üåç Pays couverts:', specificInfo.countries.join(', '));
    console.log('üìö Source:', specificInfo.source);

    console.log('\nüéØ R√âSUM√â:');
    console.log(`‚Ä¢ ${foundTerms.size} termes g√©ographiques d√©tect√©s`);
    console.log(`‚Ä¢ ${postalCodes.length} codes postaux d√©tect√©s`);
    console.log(`‚Ä¢ Type: Carte de distribution d'esp√®ce`);
    console.log(
      `‚Ä¢ Cette carte utilise des symboles/couleurs plut√¥t que des noms de d√©partements`
    );

    // Sauvegarde des r√©sultats
    const analysisResult = {
      extractedText: mapResult.text,
      confidence: mapResult.confidence,
      foundGeographicTerms: Array.from(foundTerms).sort(),
      postalCodes: postalCodes,
      mapAnalysis: specificInfo,
      note: "Cette carte de distribution utilise principalement des symboles et couleurs pour indiquer la pr√©sence de l'esp√®ce. Les noms de d√©partements ne sont pas directement visibles sur cette carte.",
    };

    await fs.writeFile(
      'carte_analysis.json',
      JSON.stringify(analysisResult, null, 2),
      'utf-8'
    );

    console.log('\nüíæ Analyse compl√®te sauvegard√©e dans carte_analysis.json');
  } catch (error) {
    console.error(
      '‚ùå Erreur:',
      error instanceof Error ? error.message : String(error)
    );
  } finally {
    await extractor.cleanup();
  }
}

if (require.main === module) {
  analyzeCarte().catch(console.error);
}
