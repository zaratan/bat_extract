#!/usr/bin/env ts-node

/**
 * Script pour t√©l√©charger automatiquement les cartes de distribution
 * de toutes les esp√®ces de chauves-souris fran√ßaises
 */

import { writeFile, mkdir, readFile } from 'fs/promises';
import { join } from 'path';
import { existsSync } from 'fs';
import {
  mergeConfig,
  type DefaultConfig,
  type DeepPartial,
} from './config/defaultConfig.js';
import { runWithConcurrency } from './utils/concurrency.js';

interface BatSpecies {
  name: string;
  slug: string;
  pageUrl: string;
  isPriority: boolean;
}

interface SpeciesDataFile {
  metadata: {
    generatedAt: string;
    source: string;
    totalSpecies: number;
    prioritySpecies: number;
  };
  species: BatSpecies[];
}

interface DiscoveredUrls {
  validImageUrls: { [slug: string]: string };
}

/**
 * Charge les donn√©es d'esp√®ces depuis le fichier JSON g√©n√©r√©
 */
async function loadSpeciesData(outputDir: string): Promise<BatSpecies[]> {
  try {
    const filePath = join(
      process.cwd(),
      outputDir,
      'generated-species-data.json'
    );
    const content = await readFile(filePath, 'utf-8');
    const data: SpeciesDataFile = JSON.parse(content);
    return data.species;
  } catch (error) {
    console.error("‚ùå Impossible de charger les donn√©es d'esp√®ces:", error);
    console.log("üí° Ex√©cutez d'abord: pnpm generate-species");
    process.exit(1);
  }
}

/**
 * Charge les URLs d√©couvertes depuis le fichier JSON
 */
async function loadDiscoveredUrls(
  outputDir: string
): Promise<{ [slug: string]: string }> {
  try {
    const filePath = join(
      process.cwd(),
      outputDir,
      'discovered-image-urls.json'
    );
    const content = await readFile(filePath, 'utf-8');
    const data: DiscoveredUrls = JSON.parse(content);
    return data.validImageUrls || {};
  } catch {
    console.warn(
      '‚ö†Ô∏è  Impossible de charger les URLs d√©couvertes, utilisation du pattern de fallback'
    );
    return {};
  }
}

/**
 * G√©n√®re l'URL de fallback pour une esp√®ce (pattern observ√©)
 */
function getSpeciesImageUrl(slug: string, cfg: DefaultConfig): string {
  // Fallback pattern bas√© sur config
  const pattern = cfg.images.fileNamePattern
    .replace(/\{slug\}/g, slug)
    .replace('{resolution}', cfg.images.resolutionSuffix);
  return `${cfg.sources.baseUrl}/wp-content/uploads/2024/11/${pattern}`; // TODO: ann√©e/mois potentiellement √† configurer plus tard
}

/**
 * Obtient l'URL d'image pour une esp√®ce (d√©couverte ou pattern par d√©faut)
 */
async function getImageUrl(
  slug: string,
  outputDir: string,
  cfg: DefaultConfig
): Promise<string> {
  const discovered = await loadDiscoveredUrls(outputDir);
  return discovered[slug] || getSpeciesImageUrl(slug, cfg);
}

/**
 * T√©l√©charge une image depuis une URL
 */
async function downloadImage(
  url: string,
  filePath: string,
  _speciesName: string
): Promise<boolean> {
  try {
    const response = await fetch(url);
    if (!response.ok) {
      console.log(
        `   ‚ùå Erreur HTTP ${response.status}: ${response.statusText}`
      );
      return false;
    }
    if (!response.body) {
      console.log('   ‚ùå Pas de contenu dans la r√©ponse');
      return false;
    }
    const buffer = Buffer.from(await response.arrayBuffer());
    await writeFile(filePath, buffer);
    console.log(
      `   ‚úÖ T√©l√©charg√©e: ${filePath.split('/').pop()} (${(buffer.length / 1024).toFixed(1)} KB)`
    );
    return true;
  } catch (error) {
    console.log(`   ‚ùå Erreur de t√©l√©chargement: ${error}`);
    return false;
  }
}

/**
 * G√©n√®re le nom de fichier standardis√© pour une esp√®ce
 */
function generateFileName(slug: string, cfg: DefaultConfig): string {
  return cfg.images.fileNamePattern
    .replace(/\{slug\}/g, slug)
    .replace('{resolution}', cfg.images.resolutionSuffix);
}

function delay(ms: number): Promise<void> {
  return new Promise(resolve => {
    globalThis.setTimeout(resolve, ms);
  });
}

async function downloadAllMapsInternal(cfg: DefaultConfig): Promise<void> {
  const imagesDir = join(process.cwd(), cfg.paths.imagesDir);
  const outputDir = cfg.paths.outputDir;
  const delayMs = cfg.network.requestDelayMs;
  const species = await loadSpeciesData(outputDir);
  console.log(
    `ü¶á D√©but du t√©l√©chargement de ${species.length} cartes de distribution\n`
  );
  if (!existsSync(imagesDir)) {
    await mkdir(imagesDir, { recursive: true });
    console.log(`üìÅ Dossier cr√©√©: ${imagesDir}\n`);
  }
  const limit = Math.max(1, cfg.parallel.maxConcurrentDownloads || 1);
  if (limit > 1) {
    console.log(
      `‚öôÔ∏è  Mode parall√®le limit√©: ${limit} t√©l√©chargements simultan√©s`
    );
  }
  let successCount = 0;
  let errorCount = 0;
  if (limit === 1) {
    for (let i = 0; i < species.length; i++) {
      const currentSpecies = species[i];
      const filename = generateFileName(currentSpecies.slug, cfg);
      const filePath = join(imagesDir, filename);
      console.log(`[${i + 1}/${species.length}] ${currentSpecies.name}`);
      if (existsSync(filePath)) {
        console.log('   ‚è≠Ô∏è  Fichier d√©j√† pr√©sent, passage au suivant');
      } else {
        const imageUrl = await getImageUrl(currentSpecies.slug, outputDir, cfg);
        console.log(`   üîó URL: ${imageUrl}`);
        const success = await downloadImage(
          imageUrl,
          filePath,
          currentSpecies.name
        );
        if (success) successCount++;
        else errorCount++;
      }
      if (i < species.length - 1) await delay(delayMs);
      console.log('');
    }
  } else {
    await runWithConcurrency(species, limit, async (currentSpecies, index) => {
      const filename = generateFileName(currentSpecies.slug, cfg);
      const filePath = join(imagesDir, filename);
      console.log(`[${index + 1}/${species.length}] ${currentSpecies.name}`);
      if (existsSync(filePath)) {
        console.log('   ‚è≠Ô∏è  Fichier d√©j√† pr√©sent, passage au suivant');
        return;
      }
      const imageUrl = await getImageUrl(currentSpecies.slug, outputDir, cfg);
      console.log(`   üîó URL: ${imageUrl}`);
      const success = await downloadImage(
        imageUrl,
        filePath,
        currentSpecies.name
      );
      if (success) successCount++;
      else errorCount++;
    });
  }
  console.log('ü¶á ================================');
  console.log('ü¶á RAPPORT DE T√âL√âCHARGEMENT');
  console.log('ü¶á ================================');
  console.log(`üìä Total: ${species.length}`);
  console.log(`‚úÖ Succ√®s: ${successCount}`);
  console.log(`‚ùå Erreurs: ${errorCount}`);
  console.log(`üìÅ Dossier: ${imagesDir}`);
}

async function downloadPriorityMapsInternal(cfg: DefaultConfig): Promise<void> {
  const imagesDir = join(process.cwd(), cfg.paths.imagesDir);
  const outputDir = cfg.paths.outputDir;
  const delayMs = cfg.network.requestDelayMs;
  const allSpecies = await loadSpeciesData(outputDir);
  const prioritySpecies = allSpecies.filter(s => s.isPriority);
  console.log(
    `üéØ T√©l√©chargement des esp√®ces prioritaires (${prioritySpecies.length} sur ${allSpecies.length})\n`
  );
  if (!existsSync(imagesDir)) {
    await mkdir(imagesDir, { recursive: true });
    console.log(`üìÅ Dossier cr√©√©: ${imagesDir}\n`);
  }
  const limit = Math.max(1, cfg.parallel.maxConcurrentDownloads || 1);
  if (limit > 1) {
    console.log(
      `‚öôÔ∏è  Mode parall√®le limit√©: ${limit} t√©l√©chargements simultan√©s`
    );
  }
  let successCount = 0;
  let errorCount = 0;
  if (limit === 1) {
    for (let i = 0; i < prioritySpecies.length; i++) {
      const currentSpecies = prioritySpecies[i];
      const filename = generateFileName(currentSpecies.slug, cfg);
      const filePath = join(imagesDir, filename);
      console.log(
        `[${i + 1}/${prioritySpecies.length}] ${currentSpecies.name} üéØ`
      );
      if (existsSync(filePath)) {
        console.log('   ‚è≠Ô∏è  Fichier d√©j√† pr√©sent, passage au suivant');
      } else {
        const imageUrl = await getImageUrl(currentSpecies.slug, outputDir, cfg);
        console.log(`   üîó URL: ${imageUrl}`);
        const success = await downloadImage(
          imageUrl,
          filePath,
          currentSpecies.name
        );
        if (success) successCount++;
        else errorCount++;
      }
      if (i < prioritySpecies.length - 1) await delay(delayMs);
      console.log('');
    }
  } else {
    await runWithConcurrency(
      prioritySpecies,
      limit,
      async (currentSpecies, index) => {
        const filename = generateFileName(currentSpecies.slug, cfg);
        const filePath = join(imagesDir, filename);
        console.log(
          `[${index + 1}/${prioritySpecies.length}] ${currentSpecies.name} üéØ`
        );
        if (existsSync(filePath)) {
          console.log('   ‚è≠Ô∏è  Fichier d√©j√† pr√©sent, passage au suivant');
          return;
        }
        const imageUrl = await getImageUrl(currentSpecies.slug, outputDir, cfg);
        console.log(`   üîó URL: ${imageUrl}`);
        const success = await downloadImage(
          imageUrl,
          filePath,
          currentSpecies.name
        );
        if (success) successCount++;
        else errorCount++;
      }
    );
  }
  console.log('ü¶á ================================');
  console.log('ü¶á RAPPORT DE T√âL√âCHARGEMENT');
  console.log('ü¶á ================================');
  console.log(`üìä Total: ${prioritySpecies.length}`);
  console.log(`‚úÖ Succ√®s: ${successCount}`);
  console.log(`‚ùå Erreurs: ${errorCount}`);
  console.log(`üìÅ Dossier: ${imagesDir}`);
}

/**
 * Classe wrapper pour le t√©l√©chargement de cartes (configurable)
 */
export class MapDownloader {
  private readonly config: DefaultConfig;
  constructor(cfg?: DeepPartial<DefaultConfig>) {
    this.config = mergeConfig(cfg);
  }
  async downloadAllMaps(): Promise<void> {
    return downloadAllMapsInternal(this.config);
  }
  async downloadPriorityMaps(): Promise<void> {
    return downloadPriorityMapsInternal(this.config);
  }
}

// Le script d'ex√©cution est maintenant dans scripts/downloadMaps.ts
