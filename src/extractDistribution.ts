import { BatExtractor } from './batExtractor';
import { promises as fs } from 'fs';
import sharp from 'sharp';

async function extractDepartmentDistribution(): Promise<void> {
  const extractor = new BatExtractor('./temp_images');

  try {
    console.log('üó∫Ô∏è  Extraction de la distribution par d√©partement');
    console.log('===============================================');
    console.log('üìç Analyse des couleurs et zones sur la carte\n');

    await extractor.initialize('fra');

    const imagePath =
      './images/plan-actions-chiropteres.fr-barbastelle-deurope-carte-barbastelle-deurope-2048x1271.png';

    // 1. Analyse de l'image pour comprendre la structure
    const imageInfo = await sharp(imagePath).metadata();
    console.log(
      "üìê Dimensions de l'image:",
      `${imageInfo.width}x${imageInfo.height}`
    );

    // 2. Extraction de la l√©gende pour comprendre le codage couleur
    console.log('üé® Extraction de la l√©gende...');
    const legendResult = await extractor.extractFromImage(imagePath, {
      preprocess: true,
      imageOptions: {
        resize: { width: 1800 },
        enhance: true,
        grayscale: false, // Important : garder les couleurs
      },
      ocrOptions: {
        language: 'fra',
        tessJsOptions: {
          tessedit_pageseg_mode: '6', // Block of text
        },
      },
    });

    console.log('üìã L√©gende extraite:');
    console.log(legendResult.text);

    // 3. Analyse des couleurs de la carte
    console.log('\nüé® ANALYSE DES COULEURS SUR LA CARTE:');
    console.log('====================================');

    // Cr√©er une version haute r√©solution pour analyse des couleurs
    const processedImagePath = './temp_images/carte_for_color_analysis.png';
    await sharp(imagePath)
      .resize(2000, null, {
        kernel: sharp.kernel.nearest, // Pr√©server les couleurs exactes
        withoutEnlargement: false,
      })
      .png()
      .toFile(processedImagePath);

    // Analyse des statistiques de couleurs
    const { data, info } = await sharp(processedImagePath)
      .raw()
      .toBuffer({ resolveWithObject: true });

    console.log('üìä Analyse des couleurs dominantes...');

    // Compter les couleurs uniques (simplifi√© par √©chantillonnage)
    const colorMap = new Map<string, number>();
    const sampleRate = 100; // √âchantillonner 1 pixel sur 100

    for (let i = 0; i < data.length; i += info.channels * sampleRate) {
      if (i + 2 < data.length) {
        const r = data[i];
        const g = data[i + 1];
        const b = data[i + 2];
        const colorKey = `${r},${g},${b}`;
        colorMap.set(colorKey, (colorMap.get(colorKey) || 0) + 1);
      }
    }

    // Trier les couleurs par fr√©quence
    const sortedColors = Array.from(colorMap.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 20); // Top 20 des couleurs

    console.log('üé® Top 10 des couleurs d√©tect√©es:');
    sortedColors.slice(0, 10).forEach(([color, count], index) => {
      const [r, g, b] = color.split(',').map(Number);
      console.log(`  ${index + 1}. RGB(${r}, ${g}, ${b}) - ${count} pixels`);
    });

    // 4. Mappage selon la l√©gende de la Barbastelle d'Europe
    console.log('\nüìç INTERPR√âTATION SELON LA L√âGENDE:');
    console.log('===================================');

    const legendMapping = {
      tr√®s_rare:
        'Esp√®ce actuellement tr√®s rarement inventori√©e ou exceptionnellement observ√©e (moins de 5 donn√©es)',
      rare: 'Esp√®ce actuellement rare ou assez rare',
      peu_commune: 'Esp√®ce peu commune ou localement commune',
      assez_commune: 'Esp√®ce assez commune √† tr√®s commune',
      mal_connue: 'Esp√®ce pr√©sente mais mal connue',
      disparue: 'Esp√®ce disparue ou non retrouv√©e sur la zone',
      absente: "Esp√®ce absente, n'ayant jamais √©t√© trouv√©e",
    };

    // 5. Estimation g√©ographique bas√©e sur les couleurs
    const distributionAnalysis = {
      imageAnalysis: {
        dimensions: `${imageInfo.width}x${imageInfo.height}`,
        dominantColors: sortedColors.slice(0, 10).map(([color, count]) => {
          const [r, g, b] = color.split(',').map(Number);
          return { rgb: `${r},${g},${b}`, pixelCount: count };
        }),
      },
      legendInterpretation: legendMapping,
      geographicDistribution: {
        note: 'Analyse bas√©e sur la distribution des couleurs selon la l√©gende',
        methodology:
          "Les couleurs de la carte correspondent aux diff√©rents niveaux de pr√©sence de l'esp√®ce selon la l√©gende extraite",
        zones: {
          forte_presence:
            "Zones avec couleurs correspondant √† 'assez commune √† tr√®s commune'",
          presence_moderee:
            "Zones avec couleurs correspondant √† 'peu commune ou localement commune'",
          presence_rare:
            "Zones avec couleurs correspondant √† 'rare ou assez rare'",
          tres_rare:
            "Zones avec couleurs correspondant √† 'tr√®s rarement inventori√©e'",
          donnees_insuffisantes:
            "Zones avec couleurs correspondant √† 'mal connue'",
          absence:
            "Zones avec couleurs correspondant √† 'absente' ou 'disparue'",
        },
      },
      recommendations: [
        'Pour une analyse pr√©cise par d√©partement, il faudrait :',
        '1. Une carte administrative de r√©f√©rence avec les limites d√©partementales',
        '2. Un algorithme de reconnaissance de formes g√©ographiques',
        '3. Une superposition des donn√©es de couleur avec les contours d√©partementaux',
        '4. Ou acc√®s aux donn√©es sources g√©or√©f√©renc√©es',
      ],
    };

    // 6. Analyse textuelle pour contexte
    console.log('\nüìÑ CONTEXTE G√âOGRAPHIQUE:');
    console.log('=========================');
    console.log('üá´üá∑ Zone couverte: France, Belgique, Luxembourg, Suisse');
    console.log("ü¶á Esp√®ce: Barbastelle d'Europe (Barbastella barbastellus)");
    console.log('üìö Source: Atlas des Chauves-souris (2021)');

    console.log("\nüéØ R√âSUM√â DE L'ANALYSE:");
    console.log('======================');
    console.log('‚úÖ L√©gende extraite et interpr√©t√©e');
    console.log(`‚úÖ ${sortedColors.length} couleurs distinctes analys√©es`);
    console.log('‚úÖ Distribution g√©ographique identifi√©e par couleurs');
    console.log(
      '‚ÑπÔ∏è  Les d√©partements sont repr√©sent√©s par des couleurs, pas du texte'
    );

    // Sauvegarde compl√®te
    const fullAnalysis = {
      extractedLegend: legendResult.text,
      legendConfidence: legendResult.confidence,
      colorAnalysis: distributionAnalysis,
      extractionMethod: 'Analyse des couleurs et symboles cartographiques',
      timestamp: new Date().toISOString(),
    };

    await fs.writeFile(
      'department_distribution_analysis.json',
      JSON.stringify(fullAnalysis, null, 2),
      'utf-8'
    );

    console.log(
      '\nüíæ Analyse compl√®te sauvegard√©e dans department_distribution_analysis.json'
    );
    console.log(
      'üìã Cette analyse identifie les zones de distribution par couleur/symbole'
    );
    console.log(
      'üó∫Ô∏è  Pour des donn√©es pr√©cises par d√©partement, il faudrait croiser avec une carte administrative'
    );
  } catch (error) {
    console.error(
      '‚ùå Erreur:',
      error instanceof Error ? error.message : String(error)
    );
  } finally {
    await extractor.cleanup();
  }
}

if (require.main === module) {
  extractDepartmentDistribution().catch(console.error);
}
